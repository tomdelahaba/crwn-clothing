{"ast":null,"code":"import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/auth\";\nconst fConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // const collectionRef = firestore.collection(\"users\");\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({\n  //   collections: collectionSnapshot.docs.map((doc) => doc.data()),\n  // });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.error(\"Error creating user\", err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(fConfig);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj); //console.log(newDocRef);\n  });\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = snapshot => {};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider).catch(e => console.error(e));\nexport default firebase;","map":{"version":3,"sources":["/Users/tomas.jarolimek/Downloads/__dev/react/crwn-clothing/src/firebase/firebase.util.js"],"names":["firebase","fConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","error","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","log","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","snapshot","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","catch","e"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,0BADN;AAEdC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,8BAFV;AAGdC,EAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,6BAHT;AAIdC,EAAAA,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,iCAJb;AAKdC,EAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,sCALjB;AAMdC,EAAAA,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,yBANL;AAOdC,EAAAA,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPb,CAAhB;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAL2E,CAO3E;AACA;AACA;AACA;AACA;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCF,GAAG,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA9BM;AAgCPrB,QAAQ,CAACqC,aAAT,CAAuBpC,OAAvB;AAEA,OAAO,MAAMqC,yBAAyB,GAAG,OACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMC,aAAa,GAAGnB,SAAS,CAACoB,UAAV,CAAqBH,aAArB,CAAtB;AACAL,EAAAA,OAAO,CAACS,GAAR,CAAYF,aAAZ;AAEA,QAAMG,KAAK,GAAGtB,SAAS,CAACsB,KAAV,EAAd;AACAJ,EAAAA,YAAY,CAACK,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,SAAS,GAAGN,aAAa,CAAClB,GAAd,EAAlB;AACAqB,IAAAA,KAAK,CAACZ,GAAN,CAAUe,SAAV,EAAqBD,GAArB,EAF4B,CAG5B;AACD,GAJD;AAMA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACD,CAfM;;AAiBP,MAAMC,+BAA+B,GAAIC,QAAD,IAAc,CAAE,CAAxD;;AAEA,OAAO,MAAMC,IAAI,GAAGnD,QAAQ,CAACmD,IAAT,EAAb;AACP,OAAO,MAAM7B,SAAS,GAAGtB,QAAQ,CAACsB,SAAT,EAAlB;AAEP,MAAM8B,QAAQ,GAAG,IAAIpD,QAAQ,CAACmD,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAC9BL,IAAI,CAACM,eAAL,CAAqBL,QAArB,EAA+BM,KAA/B,CAAsCC,CAAD,IAAOzB,OAAO,CAACC,KAAR,CAAcwB,CAAd,CAA5C,CADK;AAGP,eAAe3D,QAAf","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/auth\";\n\nconst fConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  // const collectionRef = firestore.collection(\"users\");\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({\n  //   collections: collectionSnapshot.docs.map((doc) => doc.data()),\n  // });\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err) {\n      console.error(\"Error creating user\", err.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(fConfig);\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n    //console.log(newDocRef);\n  });\n\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = (snapshot) => {};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () =>\n  auth.signInWithPopup(provider).catch((e) => console.error(e));\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}