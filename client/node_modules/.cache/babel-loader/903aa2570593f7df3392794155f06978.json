{"ast":null,"code":"import shopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.util\";\n/* export const updateCollections = (collections) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\n  payload: collections.payload,\n}); */\n\nexport const fetchCollectionsStart = () => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionSuccess = collectionsMap => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionFailure = errorMessage => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n    /* \n    // Fetch request to firebase, ha, ha, 1590128390 nested fields to get the results ...\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-1dc50/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n\n    /* \n    // Promise style\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); \n    */\n\n    /* \n    // Observable pattern\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/Users/tomas.jarolimek/Downloads/__dev/react/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,8BAHP;AAKA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B;AAIP,OAAO,MAAMC,sBAAsB,GAAIC,cAAD,KAAqB;AACzDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADmC;AAEzDC,EAAAA,OAAO,EAAEF;AAFgD,CAArB,CAA/B;AAKP,OAAO,MAAMG,sBAAsB,GAAIC,YAAD,KAAmB;AACvDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADiC;AAEvDH,EAAAA,OAAO,EAAEE;AAF8C,CAAnB,CAA/B;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEIY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,sBAAsB,CAACC,cAAD,CAAvB,CAAR;AACD,KALH,EAMGa,KANH,CAMUC,KAAD,IAAWP,QAAQ,CAACJ,sBAAsB,CAACW,KAAK,CAACC,OAAP,CAAvB,CAN5B;AAOD,GApCD;AAqCD,CAtCM","sourcesContent":["import shopActionTypes from \"./shop.types\";\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.util\";\n\n/* export const updateCollections = (collections) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\n  payload: collections.payload,\n}); */\n\nexport const fetchCollectionsStart = () => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionSuccess = (collectionsMap) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\nexport const fetchCollectionFailure = (errorMessage) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n\n    /* \n    // Fetch request to firebase, ha, ha, 1590128390 nested fields to get the results ...\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-1dc50/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n    /* \n    // Promise style\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); \n    */\n    /* \n    // Observable pattern\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionSuccess(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionFailure(error.message)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}