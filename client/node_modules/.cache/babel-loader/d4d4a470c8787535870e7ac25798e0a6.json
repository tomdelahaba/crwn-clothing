{"ast":null,"code":"var _jsxFileName = \"/Users/tomas.jarolimek/Downloads/__dev/react/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CollectionOverview from \"../../components/collections-overview/collection-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\n_c = CollectionOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    /* \n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n     /* \n    // Fetch request to firebase, ha, ha, 1590128390 nested fields to get the results ...\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-1dc50/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n\n    /* \n    // Promise style\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); \n    */\n\n    /* \n    // Observable pattern\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionOverviewWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStatesToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/Users/tomas.jarolimek/Downloads/__dev/react/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","createStructuredSelector","connect","CollectionOverview","CollectionPage","WithSpinner","fetchCollectionsStartAsync","selectIsCollectionFetching","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","render","match","props","loading","state","path","mapStatesToProps","isCollectionFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,kBAAP,MAA+B,qEAA/B;AAEA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,QAA2C,gCAA3C;;AAEA,MAAMC,6BAA6B,GAAGH,WAAW,CAACF,kBAAD,CAAjD;KAAMK,6B;AACN,MAAMC,yBAAyB,GAAGJ,WAAW,CAACD,cAAD,CAA7C;MAAMK,yB;;AAEN,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG;AAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEH,KAAK,CAACI,IAAK,EAFtB;AAGE,QAAA,MAAM,EAAGH,KAAD,iBACN,QAAC,6BAAD;AAA+B,UAAA,SAAS,EAAEC,OAA1C;AAAA,aAAuDD;AAAvD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAED,KAAK,CAACI,IAAK,gBADtB;AAEE,QAAA,MAAM,EAAGH,KAAD,iBACN,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEC,OAAtC;AAAA,aAAmDD;AAAnD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AA1DoC;;AA6DvC,MAAMI,gBAAgB,GAAGlB,wBAAwB,CAAC;AAChDmB,EAAAA,oBAAoB,EAAEb;AAD0B,CAAD,CAAjD;;AAIA,MAAMc,kBAAkB,GAAIC,QAAD,KAAe,EAAf,CAA3B;;AAEA,eAAepB,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCX,QAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\n\nimport CollectionOverview from \"../../components/collections-overview/collection-overview.component\";\n\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selector\";\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    /* \n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n\n    /* \n    // Fetch request to firebase, ha, ha, 1590128390 nested fields to get the results ...\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-1dc50/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n    /* \n    // Promise style\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); \n    */\n    /* \n    // Observable pattern\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n  }\n\n  render() {\n    const { match } = this.props;\n    const { loading } = this.state;\n    return (\n      <div className='shop-page'>\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        {/* WITHOUT SPINNER\n        <Route exact path={`${match.path}`} component={CollectionOverview} />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPage}\n        /> */}\n      </div>\n    );\n  }\n}\n\nconst mapStatesToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}